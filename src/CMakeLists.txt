
# Copyright (c) 2017-2018 the BasicX authors
# All rights reserved.
#
# The project sponsor and lead author is Xu Rendong.
# E-mail: xrd@ustc.edu, QQ: 277195007, WeChat: ustc_xrd
# See the contributors file for names of other contributors.
#
# Commercial use of this code in source and binary forms is
# governed by a LGPL v3 license. You may get a copy from the
# root directory. Or else you should get a specific written 
# permission from the project author.
#
# Individual and educational use of this code in source and
# binary forms is governed by a 3-clause BSD license. You may
# get a copy from the root directory. Certainly welcome you
# to contribute code of all sorts.
#
# Be sure to retain the above copyright notice and conditions.

PROJECT (basicx CXX)

CMAKE_MINIMUM_REQUIRED (VERSION 2.8)

SET_PROPERTY (GLOBAL PROPERTY USE_FOLDERS ON)

OPTION (CMAKE_PLATFORM_X64 "platform x86 or x64." OFF) # 启用则 64 位，禁用则 32 位
OPTION (CMAKE_LINKTYPE_SHARED "link type shared or static." ON) # 启用则动态链接，禁用则静态链接
OPTION (CMAKE_COMPILE_RELEASE "compile release or debug." ON) # 启用则 release 版，禁用则 debug 版

# 目前只允许 link=shared runtime-link=shared (DLL MD/MDd) 和 link=static runtime-link=static (LIB MT/MTd) 两种
IF (CMAKE_PLATFORM_X64)
    SET (PATH_FLAG_PLATFORM "x64")
ELSE ()
    SET (PATH_FLAG_PLATFORM "x86")
ENDIF ()
IF (CMAKE_LINKTYPE_SHARED)
    SET (PATH_FLAG_BINORLIB "bin")
    SET (PATH_FLAG_LINKTYPE "shared")
ELSE ()
    SET (PATH_FLAG_BINORLIB "lib")
    SET (PATH_FLAG_LINKTYPE "static")
ENDIF ()
IF (CMAKE_COMPILE_RELEASE)
    SET (PATH_FLAG_COMPILE "release")
ELSE ()
    SET (PATH_FLAG_COMPILE "debug")
ENDIF ()

SET (SDKDIR_PATH "D:/SDK/GitHub/VS2017" CACHE PATH "sdk dir." FORCE)
SET (SDKDIR_MARIADB "${SDKDIR_PATH}/MariaDB" CACHE PATH "mariadb dir." FORCE)
SET (SDKDIR_MARIADB_INCLUDE "${SDKDIR_PATH}/MariaDB/${PATH_FLAG_PLATFORM}/include" CACHE PATH "mariadb include dir." FORCE)
SET (SDKDIR_MARIADB_LIBRARY_DEBUG "${SDKDIR_PATH}/MariaDB/${PATH_FLAG_PLATFORM}/${PATH_FLAG_BINORLIB}/${PATH_FLAG_LINKTYPE}/debug" CACHE PATH "mariadb library debug dir." FORCE)
SET (SDKDIR_MARIADB_LIBRARY_RELEASE "${SDKDIR_PATH}/MariaDB/${PATH_FLAG_PLATFORM}/${PATH_FLAG_BINORLIB}/${PATH_FLAG_LINKTYPE}/release" CACHE PATH "mariadb library release dir." FORCE)

SET (BASICX_VERSION_MAJOR 0)
SET (BASICX_VERSION_MINOR 5)
SET (BASICX_VERSION_PATCH 0)

# SET (CMAKE_C_COMPILER "D:/VS 2017/VC/bin/x86_amd64")
# SET (CMAKE_CXX_COMPILER "D:/VS 2017/VC/bin/x86_amd64")

INCLUDE (CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG ("-std=c++11" COMPILER_SUPPORTS_CXX11)
CHECK_CXX_COMPILER_FLAG ("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
IF (COMPILER_SUPPORTS_CXX11)
    IF (CMAKE_COMPILER_IS_GNUCXX)
        SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=gnu++11")
    ELSE ()
        SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
    ENDIF ()
ELSEIF (COMPILER_SUPPORTS_CXX0X)
    SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
ELSE ()
    # MSVC, ON by default, if available
ENDIF ()

MESSAGE (STATUS ${CMAKE_SYSTEM_NAME} " " ${CMAKE_SYSTEM_VERSION} " " ${CMAKE_SYSTEM_PROCESSOR})

IF (CMAKE_COMPILE_RELEASE)
    SET (CMAKE_CONFIGURATION_TYPES "Release;" CACHE STRING "project type." FORCE) # Debug、Release、RelWithDebInfo、MinSizeRel
ELSE ()
    SET (CMAKE_CONFIGURATION_TYPES "Debug;" CACHE STRING "project type." FORCE) # Debug、Release、RelWithDebInfo、MinSizeRel
ENDIF ()

IF (WIN32)
    SET (CMAKE_INSTALL_PREFIX "C:/Users/xrd/Desktop/basicx" CACHE PATH "install prefix." FORCE)
	IF (CMAKE_PLATFORM_X64)
    	SET (CMAKE_BOOST_ROOT "${SDKDIR_PATH}/Boost/1.65/x64" CACHE PATH "boost root." FORCE)
	ELSE ()
    	SET (CMAKE_BOOST_ROOT "${SDKDIR_PATH}/Boost/1.65/x86" CACHE PATH "boost root." FORCE)
	ENDIF ()
ELSEIF ((UNIX) OR (APPLE))
    SET (CMAKE_INSTALL_PREFIX "/usr/local/basicx" CACHE PATH "install prefix." FORCE)
	IF (CMAKE_PLATFORM_X64)
    	SET (CMAKE_BOOST_ROOT "/usr/local/boost/1.65/x64" CACHE PATH "boost root." FORCE)
	ELSE ()
    	SET (CMAKE_BOOST_ROOT "/usr/local/boost/1.65/x86" CACHE PATH "boost root." FORCE)
	ENDIF ()
ENDIF ()
SET (CMAKE_BOOST_VERSION "1.65.1" CACHE STRING "boost version." FORCE)
SET (BOOST_ROOT ${CMAKE_BOOST_ROOT})

IF (MSVC)
    # https://msdn.microsoft.com/en-us/library/fwkeyyhe.aspx
    IF (CMAKE_LINKTYPE_SHARED)
        SET (CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MDd") # /MDd、/MTd
    ELSE ()
        SET (CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MTd") # /MDd、/MTd
	ENDIF ()
	SET (CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /Ob0") # /Ob0、Ob1、Ob2
	SET (CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /Gm") # /Gm、/Gm-
	SET (CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /D \"_DEBUG\"") #
    IF (CMAKE_LINKTYPE_SHARED)
        SET (CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MD") # /MD、/MT
    ELSE ()
        SET (CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MT") # /MD、/MT
	ENDIF ()
	SET (CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /O2") # /Od、/O1、/O2、/Ox
	SET (CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /Ob2") # /Ob0、/Ob1、/Ob2
	SET (CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /Oi") # /Oi
	SET (CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /Ot") # /Os、/Ot
	SET (CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /Oy-") # /Oy、/Oy-
	SET (CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /GL") # /GL
	SET (CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /Gy") # /Gy、/Gy-
    SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /Zc:wchar_t") # /Zc:wchar_t、/Zc:wchar_t-
    SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W3") # /W0、/W1、/W2、/W3、/W4、/Wall
    SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /Zi") # /Z7、/Zi、/ZI
	SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /sdl") # /sdl、/sdl-
	SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /D \"_CONSOLE\" /D \"_LIB\" /D \"_UNICODE\" /D \"UNICODE\"") #
	# SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /Zc:wchar_t /W3")
	# SET_TARGET_PROPERTIES (${PROJECT_NAME} PROPERTIES COMPILE_FLAGS "/Zc:wchar_t /W3")
	# ADD_DEFINITIONS ("/Zc:wchar_t /W3")
	SET (CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} /OPT:REF")
	SET (CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} /OPT:ICF")
	SET (CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} /LTCG")
	SET (CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /INCLUDE:\"__tcmalloc\"")
ELSE ()
	# TODO:
ENDIF ()

# SEND_ERROR、STATUS、FATAL_ERROR
MESSAGE (STATUS "project binary dir: " ${PROJECT_BINARY_DIR})
MESSAGE (STATUS "project source dir: " ${PROJECT_SOURCE_DIR})

CONFIGURE_FILE (
    "${PROJECT_SOURCE_DIR}/config.h.in"
	"${PROJECT_BINARY_DIR}/config.h"
    )

# SET (Boost_DEBUG 1)
SET (Boost_COMPILER "-vc141")
IF (CMAKE_PLATFORM_X64)
	# SET (BOOST_ROOT "${SDKDIR_PATH}/Boost/1.65/x64") # 1
	# SET (BOOST_INCLUDEDIR "${SDKDIR_PATH}/Boost/1.65/x64") # 1
	# SET (BOOST_LIBRARYDIR "${SDKDIR_PATH}/Boost/1.65/x64/stage/lib") # 1
ELSE ()
	# SET (BOOST_ROOT "${SDKDIR_PATH}/Boost/1.65/x86") # 1
	# SET (BOOST_INCLUDEDIR "${SDKDIR_PATH}/Boost/1.65/x86") # 1
	# SET (BOOST_LIBRARYDIR "${SDKDIR_PATH}/Boost/1.65/x86/stage/lib") # 1
ENDIF ()
SET (Boost_USE_STATIC_LIBS ON) # 2
SET (Boost_USE_MULTITHREADED ON) # 2
SET (Boost_USE_STATIC_RUNTIME OFF) # 2
FIND_PACKAGE (Boost ${CMAKE_BOOST_VERSION} REQUIRED system random) # 3
MESSAGE (STATUS "boost include path: " ${Boost_INCLUDE_DIRS})
MESSAGE (STATUS "boost library path: " ${Boost_LIBRARY_DIRS})
INCLUDE_DIRECTORIES (${Boost_INCLUDE_DIRS})
LINK_DIRECTORIES (${Boost_LIBRARY_DIRS})

FILE (MAKE_DIRECTORY "${PROJECT_BINARY_DIR}/archive" "${PROJECT_BINARY_DIR}/library" "${PROJECT_BINARY_DIR}/runtime")
SET (CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/archive")
SET (CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/library")
SET (CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/runtime")

IF (CMAKE_PLATFORM_X64)
    SET (CMAKE_AUXLIB_DIR "${CMAKE_CURRENT_SOURCE_DIR}/auxlib/x64" CACHE PATH "auxlib dir." FORCE)
ELSE ()
    SET (CMAKE_AUXLIB_DIR "${CMAKE_CURRENT_SOURCE_DIR}/auxlib/x86" CACHE PATH "auxlib dir." FORCE)
ENDIF ()

FILE (COPY "${CMAKE_AUXLIB_DIR}/libtcmalloc.lib" DESTINATION ${PROJECT_BINARY_DIR})

FILE (GLOB BASICX_HEADER_FILES "${PROJECT_SOURCE_DIR}/${PROJECT_NAME}/*.h")
FILE (GLOB BASICX_SOURCE_FILES "${PROJECT_SOURCE_DIR}/${PROJECT_NAME}/*.cpp")
SOURCE_GROUP ("Header Files" FILES ${BASICX_HEADER_FILES})
SOURCE_GROUP ("Source Files" FILES ${BASICX_SOURCE_FILES})

ADD_SUBDIRECTORY ("${PROJECT_SOURCE_DIR}/common")
ADD_SUBDIRECTORY ("${PROJECT_SOURCE_DIR}/timers")
ADD_SUBDIRECTORY ("${PROJECT_SOURCE_DIR}/syslog")
ADD_SUBDIRECTORY ("${PROJECT_SOURCE_DIR}/syscfg")
ADD_SUBDIRECTORY ("${PROJECT_SOURCE_DIR}/sysrtm")
ADD_SUBDIRECTORY ("${PROJECT_SOURCE_DIR}/sysdbi_m")
ADD_SUBDIRECTORY ("${PROJECT_SOURCE_DIR}/sysdbi_s")
ADD_SUBDIRECTORY ("${PROJECT_SOURCE_DIR}/network")
ADD_SUBDIRECTORY ("${PROJECT_SOURCE_DIR}/plugins")
IF (CMAKE_LINKTYPE_SHARED)
    ADD_SUBDIRECTORY ("${PROJECT_SOURCE_DIR}/pluginx")
ENDIF ()

INCLUDE_DIRECTORIES ("${PROJECT_SOURCE_DIR}" "${SDKDIR_MARIADB_INCLUDE}")

LINK_DIRECTORIES ("${PROJECT_BINARY_DIR}/archive")
IF (MSVC)
    SET (CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG} /LIBPATH:\"${SDKDIR_MARIADB_LIBRARY_DEBUG}\"")
    SET (CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} /LIBPATH:\"${SDKDIR_MARIADB_LIBRARY_RELEASE}\"")
ELSE ()
    LINK_DIRECTORIES (${PROJECT_BINARY_DIR}/archive) # need check
ENDIF ()

ADD_EXECUTABLE (${PROJECT_NAME} ${BASICX_HEADER_FILES} ${BASICX_SOURCE_FILES})

IF (WIN32)
    TARGET_LINK_LIBRARIES (${PROJECT_NAME} libtcmalloc.lib libmariadb.lib common.lib timers.lib syslog.lib syscfg.lib sysrtm.lib sysdbi_m.lib sysdbi_s.lib network.lib plugins.lib)
ELSEIF (UNIX)
    TARGET_LINK_LIBRARIES (${PROJECT_NAME} libtcmalloc.a libmariadb.a common.a timers.a syslog.a syscfg.a sysrtm.a sysdbi_m.a sysdbi_s.a network.a plugins.a)
ELSEIF (APPLE)
    TARGET_LINK_LIBRARIES (${PROJECT_NAME} libtcmalloc.a libmariadb.a common.a timers.a syslog.a syscfg.a sysrtm.a sysdbi_m.a sysdbi_s.a network.a plugins.a)
ENDIF ()

FILE (GLOB INSTALL_COMMON_OTLV4_SOURCE_FILES "${PROJECT_SOURCE_DIR}/common/OTLV4/*.h")
FILE (GLOB INSTALL_COMMON_FORMAT_SOURCE_FILES "${PROJECT_SOURCE_DIR}/common/Format/*.hpp")
FILE (GLOB INSTALL_COMMON_PUGIXML_SOURCE_FILES "${PROJECT_SOURCE_DIR}/common/PugiXml/*.hpp")
FILE (GLOB INSTALL_COMMON_JSONCPP_SOURCE_FILES "${PROJECT_SOURCE_DIR}/common/JsonCpp/*.h")

FILE (MAKE_DIRECTORY "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}")
FILE (MAKE_DIRECTORY "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/${PATH_FLAG_BINORLIB}")
FILE (MAKE_DIRECTORY "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/${PATH_FLAG_BINORLIB}/${PATH_FLAG_LINKTYPE}")
FILE (MAKE_DIRECTORY "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/${PATH_FLAG_BINORLIB}/${PATH_FLAG_LINKTYPE}/${PATH_FLAG_COMPILE}")
FILE (MAKE_DIRECTORY "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/doc")
FILE (MAKE_DIRECTORY "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/etc")
FILE (MAKE_DIRECTORY "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/include")
FILE (MAKE_DIRECTORY "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/include/common")
FILE (MAKE_DIRECTORY "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/include/common/OTLV4")
FILE (MAKE_DIRECTORY "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/include/common/Format")
FILE (MAKE_DIRECTORY "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/include/common/PugiXml")
FILE (MAKE_DIRECTORY "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/include/common/JsonCpp")
FILE (MAKE_DIRECTORY "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/include/timers")
FILE (MAKE_DIRECTORY "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/include/syslog")
FILE (MAKE_DIRECTORY "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/include/syscfg")
FILE (MAKE_DIRECTORY "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/include/sysrtm")
FILE (MAKE_DIRECTORY "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/include/sysdbi_m")
FILE (MAKE_DIRECTORY "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/include/sysdbi_s")
FILE (MAKE_DIRECTORY "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/include/network")
FILE (MAKE_DIRECTORY "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/include/plugins")
IF (CMAKE_LINKTYPE_SHARED)
	FILE (MAKE_DIRECTORY "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/${PATH_FLAG_BINORLIB}/${PATH_FLAG_LINKTYPE}/${PATH_FLAG_COMPILE}/plugins")
	FILE (MAKE_DIRECTORY "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/${PATH_FLAG_BINORLIB}/${PATH_FLAG_LINKTYPE}/${PATH_FLAG_COMPILE}/plugins/plugin_test_1")
	FILE (MAKE_DIRECTORY "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/${PATH_FLAG_BINORLIB}/${PATH_FLAG_LINKTYPE}/${PATH_FLAG_COMPILE}/plugins/plugin_test_2")
ENDIF ()

IF (WIN32)
    INSTALL (
        TARGETS ${PROJECT_NAME} 
        DESTINATION "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/${PATH_FLAG_BINORLIB}/${PATH_FLAG_LINKTYPE}/${PATH_FLAG_COMPILE}"
    )
    INSTALL (
	    PROGRAMS "${CMAKE_AUXLIB_DIR}/libtcmalloc.dll" 
	    DESTINATION "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/${PATH_FLAG_BINORLIB}/${PATH_FLAG_LINKTYPE}/${PATH_FLAG_COMPILE}"
	)
    INSTALL (
	    FILES "${PROJECT_SOURCE_DIR}/../changes.md" 
	          "${PROJECT_SOURCE_DIR}/../library.txt" 
	          "${PROJECT_SOURCE_DIR}/../license.txt" 
	          "${PROJECT_SOURCE_DIR}/../license_bsd.txt" 
	          "${PROJECT_SOURCE_DIR}/../license_lgpl_chs.txt" 
	          "${PROJECT_SOURCE_DIR}/../license_lgpl_eng.txt" 
	          "${PROJECT_SOURCE_DIR}/../readme.md" 
	    DESTINATION "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/doc"
	)
    INSTALL (
	    FILES "${PROJECT_SOURCE_DIR}/../etc/cfg_main.ini" 
	    DESTINATION "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/etc"
	)
    INSTALL (
		FILES ${INSTALL_COMMON_OTLV4_SOURCE_FILES}
	    DESTINATION "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/include/common/OTLV4"
	)
    INSTALL (
		FILES ${INSTALL_COMMON_FORMAT_SOURCE_FILES}
	    DESTINATION "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/include/common/Format"
	)
    INSTALL (
		FILES ${INSTALL_COMMON_PUGIXML_SOURCE_FILES}
	    DESTINATION "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/include/common/PugiXml"
	)
    INSTALL (
		FILES ${INSTALL_COMMON_JSONCPP_SOURCE_FILES}
	    DESTINATION "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/include/common/JsonCpp"
	)
    INSTALL (
	    FILES "${PROJECT_SOURCE_DIR}/common/assist.h" 
		      "${PROJECT_SOURCE_DIR}/common/common.h" 
		      "${PROJECT_SOURCE_DIR}/common/compile.h" 
		      "${PROJECT_SOURCE_DIR}/common/define.h" 
		      "${PROJECT_SOURCE_DIR}/common/md5.h" 
			  "${PROJECT_SOURCE_DIR}/common/sysdef.h" 
			  "${PROJECT_SOURCE_DIR}/common/winver.h" 
	    DESTINATION "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/include/common"
	)
    INSTALL (
		FILES "${PROJECT_SOURCE_DIR}/timers/timers.h" 
	    DESTINATION "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/include/timers"
	)
    INSTALL (
		FILES "${PROJECT_SOURCE_DIR}/syslog/syslog.h" 
	    DESTINATION "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/include/syslog"
	)
    INSTALL (
		FILES "${PROJECT_SOURCE_DIR}/syscfg/syscfg.h" 
	    DESTINATION "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/include/syscfg"
	)
    INSTALL (
		FILES "${PROJECT_SOURCE_DIR}/sysrtm/sysrtm.h" 
	    DESTINATION "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/include/sysrtm"
	)
    INSTALL (
		FILES "${PROJECT_SOURCE_DIR}/sysdbi_m/sysdbi_m.h" 
	    DESTINATION "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/include/sysdbi_m"
	)
    INSTALL (
		FILES "${PROJECT_SOURCE_DIR}/sysdbi_s/sysdbi_s.h" 
	    DESTINATION "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/include/sysdbi_s"
	)
    INSTALL (
		FILES "${PROJECT_SOURCE_DIR}/network/client.h" 
		      "${PROJECT_SOURCE_DIR}/network/server.h" 
		      "${PROJECT_SOURCE_DIR}/network/asio_client.h" 
		      "${PROJECT_SOURCE_DIR}/network/sock_client.h" 
	    DESTINATION "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/include/network"
	)
    INSTALL (
		FILES "${PROJECT_SOURCE_DIR}/plugins/plugins.h" 
	    DESTINATION "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/include/plugins"
	)
    INSTALL (
	    FILES "${CMAKE_AUXLIB_DIR}/libtcmalloc.lib" 
		      "${PROJECT_BINARY_DIR}/archive/${PATH_FLAG_COMPILE}/common.lib" 
		      "${PROJECT_BINARY_DIR}/archive/${PATH_FLAG_COMPILE}/timers.lib" 
		      "${PROJECT_BINARY_DIR}/archive/${PATH_FLAG_COMPILE}/syslog.lib" 
		      "${PROJECT_BINARY_DIR}/archive/${PATH_FLAG_COMPILE}/syscfg.lib" 
		      "${PROJECT_BINARY_DIR}/archive/${PATH_FLAG_COMPILE}/sysrtm.lib" 
		      "${PROJECT_BINARY_DIR}/archive/${PATH_FLAG_COMPILE}/sysdbi_m.lib" 
		      "${PROJECT_BINARY_DIR}/archive/${PATH_FLAG_COMPILE}/sysdbi_s.lib" 
		      "${PROJECT_BINARY_DIR}/archive/${PATH_FLAG_COMPILE}/network.lib" 
		      "${PROJECT_BINARY_DIR}/archive/${PATH_FLAG_COMPILE}/plugins.lib" 
	    DESTINATION "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/${PATH_FLAG_BINORLIB}/${PATH_FLAG_LINKTYPE}/${PATH_FLAG_COMPILE}"
	)
    IF (CMAKE_LINKTYPE_SHARED)
        INSTALL (
	        FILES "${SDKDIR_MARIADB_LIBRARY_RELEASE}/libmariadb.dll" 
		          "${PROJECT_BINARY_DIR}/runtime/${PATH_FLAG_COMPILE}/timers.dll" 
		          "${PROJECT_BINARY_DIR}/runtime/${PATH_FLAG_COMPILE}/syslog.dll" 
		          "${PROJECT_BINARY_DIR}/runtime/${PATH_FLAG_COMPILE}/syscfg.dll" 
		          "${PROJECT_BINARY_DIR}/runtime/${PATH_FLAG_COMPILE}/sysrtm.dll" 
		          "${PROJECT_BINARY_DIR}/runtime/${PATH_FLAG_COMPILE}/sysdbi_m.dll" 
		          "${PROJECT_BINARY_DIR}/runtime/${PATH_FLAG_COMPILE}/sysdbi_s.dll" 
		          "${PROJECT_BINARY_DIR}/runtime/${PATH_FLAG_COMPILE}/network.dll" 
		          "${PROJECT_BINARY_DIR}/runtime/${PATH_FLAG_COMPILE}/plugins.dll" 
	        DESTINATION "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/${PATH_FLAG_BINORLIB}/${PATH_FLAG_LINKTYPE}/${PATH_FLAG_COMPILE}"
	    )
        INSTALL (
		    FILES "${PROJECT_BINARY_DIR}/runtime/${PATH_FLAG_COMPILE}/plugin_test_1.dll" 
			      "${PROJECT_SOURCE_DIR}/pluginx/plugin_test_1/plugin_test_1.ini" 
			      "${PROJECT_SOURCE_DIR}/pluginx/plugin_test_1/plugin_test_1.xml" 
	        DESTINATION "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/${PATH_FLAG_BINORLIB}/${PATH_FLAG_LINKTYPE}/${PATH_FLAG_COMPILE}/plugins/plugin_test_1"
	    )
        INSTALL (
		    FILES "${PROJECT_BINARY_DIR}/runtime/${PATH_FLAG_COMPILE}/plugin_test_2.dll" 
			      "${PROJECT_SOURCE_DIR}/pluginx/plugin_test_2/plugin_test_2.ini" 
			      "${PROJECT_SOURCE_DIR}/pluginx/plugin_test_2/plugin_test_2.xml" 
	        DESTINATION "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/${PATH_FLAG_BINORLIB}/${PATH_FLAG_LINKTYPE}/${PATH_FLAG_COMPILE}/plugins/plugin_test_2"
	    )
    ENDIF ()
ELSEIF ((UNIX) OR (APPLE))
    INSTALL (
	    TARGETS ${PROJECT_NAME} 
	    DESTINATION "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/${PATH_FLAG_BINORLIB}/${PATH_FLAG_LINKTYPE}/${PATH_FLAG_COMPILE}" 
		# PERMISSIONS OWNER_EXECUTE GROUP_EXECUTE WORLD_EXECUTE # 755
    )
    INSTALL (
	    PROGRAMS "${CMAKE_AUXLIB_DIR}/libtcmalloc.so" 
	    DESTINATION "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/${PATH_FLAG_BINORLIB}/${PATH_FLAG_LINKTYPE}/${PATH_FLAG_COMPILE}" 
		# PERMISSIONS OWNER_EXECUTE GROUP_EXECUTE WORLD_EXECUTE # 755
	)
    INSTALL (
	    FILES "${PROJECT_SOURCE_DIR}/../changes.md" 
	          "${PROJECT_SOURCE_DIR}/../library.txt" 
	          "${PROJECT_SOURCE_DIR}/../license.txt" 
	          "${PROJECT_SOURCE_DIR}/../license_bsd.txt" 
	          "${PROJECT_SOURCE_DIR}/../license_lgpl_chs.txt" 
	          "${PROJECT_SOURCE_DIR}/../license_lgpl_eng.txt" 
	          "${PROJECT_SOURCE_DIR}/../readme.md" 
	    DESTINATION "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/doc" 
		# PERMISSIONS OWNER_WRITE OWNER_READ GROUP_READ WORLD_READ # 644
	)
    INSTALL (
	    FILES "${PROJECT_SOURCE_DIR}/../etc/cfg_main.ini" 
	    DESTINATION "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/etc" 
		# PERMISSIONS OWNER_WRITE OWNER_READ GROUP_READ WORLD_READ # 644
	)
    INSTALL (
		FILES ${INSTALL_COMMON_OTLV4_SOURCE_FILES} 
	    DESTINATION "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/include/common/OTLV4" 
		# PERMISSIONS OWNER_WRITE OWNER_READ GROUP_READ WORLD_READ # 644
	)
    INSTALL (
		FILES ${INSTALL_COMMON_FORMAT_SOURCE_FILES} 
	    DESTINATION "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/include/common/Format" 
		# PERMISSIONS OWNER_WRITE OWNER_READ GROUP_READ WORLD_READ # 644
	)
    INSTALL (
		FILES ${INSTALL_COMMON_PUGIXML_SOURCE_FILES} 
	    DESTINATION "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/include/common/PugiXml" 
		# PERMISSIONS OWNER_WRITE OWNER_READ GROUP_READ WORLD_READ # 644
	)
    INSTALL (
		FILES ${INSTALL_COMMON_JSONCPP_SOURCE_FILES} 
	    DESTINATION "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/include/common/JsonCpp" 
		# PERMISSIONS OWNER_WRITE OWNER_READ GROUP_READ WORLD_READ # 644
	)
    INSTALL (
	    FILES "${PROJECT_SOURCE_DIR}/common/assist.h" 
		      "${PROJECT_SOURCE_DIR}/common/common.h" 
		      "${PROJECT_SOURCE_DIR}/common/compile.h" 
		      "${PROJECT_SOURCE_DIR}/common/define.h" 
		      "${PROJECT_SOURCE_DIR}/common/md5.h" 
			  "${PROJECT_SOURCE_DIR}/common/sysdef.h" 
			  "${PROJECT_SOURCE_DIR}/common/winver.h" 
	    DESTINATION "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/include/common" 
		# PERMISSIONS OWNER_WRITE OWNER_READ GROUP_READ WORLD_READ # 644
	)
    INSTALL (
		FILES "${PROJECT_SOURCE_DIR}/timers/timers.h" 
	    DESTINATION "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/include/timers" 
		# PERMISSIONS OWNER_WRITE OWNER_READ GROUP_READ WORLD_READ # 644
	)
    INSTALL (
		FILES "${PROJECT_SOURCE_DIR}/syslog/syslog.h" 
	    DESTINATION "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/include/syslog" 
		# PERMISSIONS OWNER_WRITE OWNER_READ GROUP_READ WORLD_READ # 644
	)
    INSTALL (
		FILES "${PROJECT_SOURCE_DIR}/syscfg/syscfg.h" 
	    DESTINATION "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/include/syscfg" 
		# PERMISSIONS OWNER_WRITE OWNER_READ GROUP_READ WORLD_READ # 644
	)
    INSTALL (
		FILES "${PROJECT_SOURCE_DIR}/sysrtm/sysrtm.h" 
	    DESTINATION "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/include/sysrtm" 
		# PERMISSIONS OWNER_WRITE OWNER_READ GROUP_READ WORLD_READ # 644
	)
    INSTALL (
		FILES "${PROJECT_SOURCE_DIR}/sysdbi_m/sysdbi_m.h" 
	    DESTINATION "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/include/sysdbi_m" 
		# PERMISSIONS OWNER_WRITE OWNER_READ GROUP_READ WORLD_READ # 644
	)
    INSTALL (
		FILES "${PROJECT_SOURCE_DIR}/sysdbi_s/sysdbi_s.h" 
	    DESTINATION "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/include/sysdbi_s" 
		# PERMISSIONS OWNER_WRITE OWNER_READ GROUP_READ WORLD_READ # 644
	)
    INSTALL (
		FILES "${PROJECT_SOURCE_DIR}/network/client.h" 
		      "${PROJECT_SOURCE_DIR}/network/server.h" 
		      "${PROJECT_SOURCE_DIR}/network/asio_client.h" 
		      "${PROJECT_SOURCE_DIR}/network/sock_client.h" 
	    DESTINATION "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/include/network" 
		# PERMISSIONS OWNER_WRITE OWNER_READ GROUP_READ WORLD_READ # 644
	)
    INSTALL (
		FILES "${PROJECT_SOURCE_DIR}/plugins/plugins.h" 
	    DESTINATION "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/include/plugins" 
		# PERMISSIONS OWNER_WRITE OWNER_READ GROUP_READ WORLD_READ # 644
	)
    INSTALL (
	    FILES "${CMAKE_AUXLIB_DIR}/libtcmalloc.a" 
		      "${PROJECT_BINARY_DIR}/archive/${PATH_FLAG_COMPILE}/common.a" 
		      "${PROJECT_BINARY_DIR}/archive/${PATH_FLAG_COMPILE}/timers.a" 
		      "${PROJECT_BINARY_DIR}/archive/${PATH_FLAG_COMPILE}/syslog.a" 
		      "${PROJECT_BINARY_DIR}/archive/${PATH_FLAG_COMPILE}/syscfg.a" 
		      "${PROJECT_BINARY_DIR}/archive/${PATH_FLAG_COMPILE}/sysrtm.a" 
		      "${PROJECT_BINARY_DIR}/archive/${PATH_FLAG_COMPILE}/sysdbi_m.a" 
		      "${PROJECT_BINARY_DIR}/archive/${PATH_FLAG_COMPILE}/sysdbi_s.a" 
		      "${PROJECT_BINARY_DIR}/archive/${PATH_FLAG_COMPILE}/network.a" 
		      "${PROJECT_BINARY_DIR}/archive/${PATH_FLAG_COMPILE}/plugins.a" 
	    DESTINATION "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/${PATH_FLAG_BINORLIB}/${PATH_FLAG_LINKTYPE}/${PATH_FLAG_COMPILE}" 
		# PERMISSIONS OWNER_WRITE OWNER_READ GROUP_READ WORLD_READ # 644
	)
    IF (CMAKE_LINKTYPE_SHARED)
        INSTALL (
	        FILES "${SDKDIR_MARIADB_LIBRARY_RELEASE}/libmariadb.so" 
		          "${PROJECT_BINARY_DIR}/runtime/${PATH_FLAG_COMPILE}/timers.so" 
		          "${PROJECT_BINARY_DIR}/runtime/${PATH_FLAG_COMPILE}/syslog.so" 
		          "${PROJECT_BINARY_DIR}/runtime/${PATH_FLAG_COMPILE}/syscfg.so" 
		          "${PROJECT_BINARY_DIR}/runtime/${PATH_FLAG_COMPILE}/sysrtm.so" 
		          "${PROJECT_BINARY_DIR}/runtime/${PATH_FLAG_COMPILE}/sysdbi_m.so" 
		          "${PROJECT_BINARY_DIR}/runtime/${PATH_FLAG_COMPILE}/sysdbi_s.so" 
		          "${PROJECT_BINARY_DIR}/runtime/${PATH_FLAG_COMPILE}/network.so" 
		          "${PROJECT_BINARY_DIR}/runtime/${PATH_FLAG_COMPILE}/plugins.so" 
	        DESTINATION "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/${PATH_FLAG_BINORLIB}/${PATH_FLAG_LINKTYPE}/${PATH_FLAG_COMPILE}" 
		    # PERMISSIONS OWNER_WRITE OWNER_READ GROUP_READ WORLD_READ # 644
	    )
        INSTALL (
		    FILES "${PROJECT_BINARY_DIR}/runtime/${PATH_FLAG_COMPILE}/plugin_test_1.so" 
			      "${PROJECT_SOURCE_DIR}/pluginx/plugin_test_1/plugin_test_1.ini" 
			      "${PROJECT_SOURCE_DIR}/pluginx/plugin_test_1/plugin_test_1.xml" 
	        DESTINATION "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/${PATH_FLAG_BINORLIB}/${PATH_FLAG_LINKTYPE}/${PATH_FLAG_COMPILE}/plugins/plugin_test_1" 
		    # PERMISSIONS OWNER_WRITE OWNER_READ GROUP_READ WORLD_READ # 644
	    )
        INSTALL (
		    FILES "${PROJECT_BINARY_DIR}/runtime/${PATH_FLAG_COMPILE}/plugin_test_2.so" 
			      "${PROJECT_SOURCE_DIR}/pluginx/plugin_test_2/plugin_test_2.ini" 
			      "${PROJECT_SOURCE_DIR}/pluginx/plugin_test_2/plugin_test_2.xml" 
	        DESTINATION "${CMAKE_INSTALL_PREFIX}/${PATH_FLAG_PLATFORM}/${PATH_FLAG_BINORLIB}/${PATH_FLAG_LINKTYPE}/${PATH_FLAG_COMPILE}/plugins/plugin_test_2" 
		    # PERMISSIONS OWNER_WRITE OWNER_READ GROUP_READ WORLD_READ # 644
	    )
    ENDIF ()
ENDIF ()
